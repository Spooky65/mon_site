{% block header %}
    {{ render(controller(
        'App\\Controller\\MainController::header',
        { 'page': "PixelClicker" }
    )) }}
{% endblock %}

{% block stylesheets %}
<link rel="stylesheet" href="SCSS/border.scss">

<style>
  body {
    -webkit-user-select: none;
    -webkit-touch-callout: none;
    -moz-user-select: none;
    -ms-user-select: none;
    user-select: none;
  }
</style>
{% endblock %}
{% block javascripts %}
<script src="https://cdnjs.cloudflare.com/ajax/libs/crypto-js/4.1.1/crypto-js.min.js" integrity="sha512-E8QSvWZ0eCLGk4km3hxSsNmGWbLtSCSUcewDQPQWZF6pEU8GlT8a5fF32wOl1i8ftdMhssTrF/OhyGWwonTcXA==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
<script type="text/javascript">
$( document ).ready(function() {

  var width = 100;
  var height = 100;
  var sizePix = 2;
  var color = 'black'; 
  // Table Pixel
  var pixelBase = document.getElementById('pixelBase');
  pixelBase.style.width = width+'px';
  pixelBase.style.height = height+'px';
  var pixelCountDiv = document.getElementById('pixelCount');
  var ppsDiv = document.getElementById('pixelPerSec');
  //if(getCookie("pixelCount")){
    //var pixelCount = getCookie("pixelCount");
    // pixel per seconds
    //var pps = getCookie("pps");
  //}else{
  var key = "s4g5e6vy7dj59dkja6gj6h69h65dcf6f";
  {% if data %}
    var decrypted = CryptoJS.AES.decrypt("{{data}}", key).toString(CryptoJS.enc.Utf8); // Messag
    decrypted = decrypted.split(',');
    color = decrypted[8]; 
    decrypted = decrypted.map((currentValue) => parseFloat(currentValue));
    pixelCount = decrypted[0];
    pps = decrypted[1];
    genCount = [decrypted[2],decrypted[3],decrypted[4]];
    genCost = [decrypted[5],decrypted[6],decrypted[7]];
  {% else %}
    var pixelCount = 0;
    // pixel per seconds
    var pps = 0;
    // Number of generator
    var genCount = [0,0,0];
    // Cost of generator
    var genCost = [15,100,1100];
  {% endif %}
  // Somme des pixel à créer
  var pixelToCreate = 0;
  // Somme des pixel activé
  var pixelActive = 0;
  var dict = new Object();
  var genGain = [0.1,1,8];
  var quotienMult = 1.15;
  var refreshTime = 100;
  pixelCountDiv.innerHTML = pixelCount;
  $("#progressbar").css("background-color",color);

  function save() {
    BigArray = [pixelCount,pps,genCount,genCost,color];
    encrypted = CryptoJS.AES.encrypt(BigArray.toString(), key); // Encryption Part
    $.ajax('{{ path('saveCookie') }}', {
        method : "POST",
        data: { 
              name : "data",
              value : encrypted.toString(),  // you can pass some parameters to the controller here
        }
    });
  };

  $( "#saveButton" ).click(function() {
    save();
    return false; // this stops normal button behaviour from executing;
  });
  setInterval(function () { save(); }, 1000*60*5);

  function createTableBase() {
    for (let indexY = 0; indexY < height; indexY++) {
      var tr = document.createElement('tr');
      tr.setAttribute("id", "Y"+indexY);
      //tr.style.width = width*sizePix+'px';
      for (let indexX = 0; indexX < width; indexX++) {
        var td = document.createElement('td');
        dict[(indexY*width)+indexX] = indexY+"X"+indexX;
        td.setAttribute("id", indexY+"X"+indexX);
        td.style.width = sizePix+'px';
        td.style.height = sizePix+'px';
        td.style.background = 'white';
        tr.appendChild(td);
      }
      pixelBase.appendChild(tr);
    }
  };

  function findNext(coordY,coordX,security) {
    for (let indexY = coordY; indexY < height; indexY++) {
      for (let indexX = coordX; indexX < width; indexX++) {
        var td = document.getElementById(indexY+"X"+indexX);
        if (td.style.background.substr(0, 5) == 'white') {
          refreshPixelCount();
          td.style.background = color;
          pixelActive++;
          verifFullBase();
          return;
        }
      }
      coordX = 0;
    }
    // évite la boucle infini au cas ou il ne trouve aucun pixel blanc
    if(security == false){
      findNext(0,0,true);
    }
  };

  function createPixel() {
    keys = Object.keys(dict);
    randomKey = keys[ keys.length * Math.random() << 0];
    random = dict[randomKey];
    delete dict[randomKey];
    var td = document.getElementById(random);
    if (td.style.background.substr(0, 5) == 'white') {
      td.style.background = color;
      refreshPixelCount();
      pixelActive++;
      $("#progressbar").css("width",(pixelActive/10000)*100 + "%");
      verifFullBase();
    }else{
      console.log("Problème dans la fonction random");
    }
  };

  function verifFullBase() {
    if (pixelActive == 10000) {
      pixelActive = 0;
      $("#pixelBase tr").remove();
      createTableBase();
    }
  }
/*
  function createPixel() {
    var coordY = Math.floor(Math.random() * height);
    var coordX = Math.floor(Math.random() * width);
    pixel = document.getElementById(coordY+"X"+coordX);
    if (pixel.style.background.substr(0, 5) == 'white') {
      //pixelCount = pixelCount + 1;
      refreshPixelCount();
      pixel.style.background = color;
      pixelActive++;
      verifFullBase();
    }else{
      findNext(coordY,coordX,false);
    }
  }
*/

  function refreshPixelCount() {
    pixelCountDiv.innerHTML = Math.floor(pixelCount);
    ppsDiv.innerHTML = Math.floor(pps * 10) / 10;
    // disabled button if no enough pixel
    $( ".addGeneratorButton" ).each(function() {
      calculC = calculCout(genCost[$( this ).attr("typeGen")] , $( this ).attr("nombre"));
      if(pixelCount < calculC){
        $( this ).prop("disabled",true);
      }else{
        $( this ).prop("disabled",false);
      }
    });
  }

  function refreshGenCount() {
    $( ".generatorCount" ).each(function() {
      $( this ).html(Math.floor(genCount[$( this ).attr("typeGen")]));
    });
    $( ".generatorCost" ).each(function() {
      $( this ).html(Math.floor(calculCout(genCost[$( this ).attr("typeGen")] , $( this ).attr("nombre"))));
    });
  }
/*

  $( "#loadButton" ).click(function() {
    pixelCount = getCookie("pixelCount");
    pps = getCookie("pps");
  });
*/
  setInterval(function () {
    ppTick = pps * (refreshTime/1000);
    pixelCount += ppTick;
    refreshPixelCount();
    pixelToCreate += ppTick;
    while(pixelToCreate >= 1){
      pixelToCreate = pixelToCreate - 1;
      createPixel();
    }
  }, refreshTime);

  $( ".addGeneratorButton" ).click(function() { clickGenerator( this.getAttribute("typeGen") , this.getAttribute("nombre") ); });

  function clickGenerator(type,nombre) {
    calculC = calculCout(genCost[type],nombre);
    if(pixelCount >= calculC){
      pixelCount -= calculC;
      pps += genGain[type] * nombre;
      genCost[type] = calculC * quotienMult;
      genCount[type] += parseInt(nombre, 10);
    }
    refreshPixelCount();
    refreshGenCount();
  }

  function calculCout(base,n) {
    var un = 0;
    for(var i = 0 ; i < n ; i++){
      un += base * Math.pow(quotienMult, i) ;
    }
    return un;
  }

  $( "#blackButton" ).click(function() { color = this.getAttribute("color"); $("tr").css("color",color); $("#progressbar").css("background-color",color); });
  $( "#redButton" ).click(function() { color = this.getAttribute("color"); $("tr").css("color",color); $("#progressbar").css("background-color",color); });
  $( "#greenButton" ).click(function() { color = this.getAttribute("color"); $("tr").css("color",color); $("#progressbar").css("background-color",color); });
  $( "#blueButton" ).click(function() { color = this.getAttribute("color"); $("tr").css("color",color); $("#progressbar").css("background-color",color); });
  $( "#resetTableButton" ).click(function() { 
      pixelActive = 0;
      $("#pixelBase tr").remove();
      createTableBase();
  });
  pixelBase.onclick = function() { 
    pixelCount++; 
    createPixel(); 
  };

  // if no table are display so there is a problem in js
  createTableBase();
  refreshGenCount();

});
</script>
{% endblock %}

{% block body %}
<div class="container text-center text-decoration-none p-3">
  <div class="m-3">
    <h1>Pixel Clicker</h1>
  </div>
  <div class="m-3">
    <h5>Objectif : <text>Clicker sur le pixel.</text></h5>
    <br>
  </div>
  <div class="m-3">
    <text>Pixels = </text>
    <text id="pixelCount"></text>
  </div>
  <div class="m-3">
    <text>Pixels per seconds = </text>
    <text id="pixelPerSec"></text>
  </div>
  <div class="container">
      <div class="row m-3 p-3">
        <div class="col-7 d-flex justify-content-end">
          <table id="pixelBase" class="border border-dark border-4 border-solid"></table>
        </div>
        <div class="col-5">
          <div class="col d-flex justify-content-start">
            <input id="blackButton" class="btn btn-dark" type="button" color="black" value="">
          </div>
          <div class="col d-flex justify-content-start">
            <input id="redButton" class="btn btn-danger" type="button" color="#dc3545" value="">
          </div>
          <div class="col d-flex justify-content-start">
            <input id="greenButton" class="btn btn-success" type="button" color="#198754" value="">
          </div>
          <div class="col d-flex justify-content-start">
            <input id="blueButton" class="btn btn-primary" type="button" color="#0d6efd" value="">
          </div>
        </div>
      </div>
      <div class="p-3 m-3">
        <div class="progress">
          <div class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" id="progressbar" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100" style="width: 0%"></div>
        </div>
      </div>
      <div class="row-cols-1">
        <div class="d-flex justify-content-center">
          <div class="col-sm-12 col-md-10 col-lg-8 col-xl-6 border border-warning border-4 border-solid rounded-pill">
            <div class="col">
              <text typeGen="0" class="generatorCount border border-dark border-4 border-solid rounded-circle p-1"></text>
              <input typeGen="0" nombre="1" class="addGeneratorButton btn btn-primary m-3" type="button" value="Crayon">
              <text>Coût = </text>
              <text class="generatorCost" typeGen="0" nombre="1"></text>
              <input typeGen="0" nombre="10" class="addGeneratorButton btn btn-primary m-3" type="button" value="X 10">
              <text>Coût = </text>
              <text class="generatorCost" typeGen="0" nombre="10"></text>
            </div>
            <div class="col">
              <text typeGen="1" class="generatorCount border border-dark border-4 border-solid rounded-circle p-1"></text>
              <input typeGen="1" nombre="1" class="addGeneratorButton btn btn-primary m-3" type="button" value="Stylo">
              <text>Coût = </text>
              <text class="generatorCost" typeGen="1" nombre="1"></text>
              <input typeGen="1" nombre="10" class="addGeneratorButton btn btn-primary m-3" type="button" value="X 10">
              <text>Coût = </text>
              <text class="generatorCost" typeGen="1" nombre="10"></text>
            </div>
            <div class="col">
              <text typeGen="2" class="generatorCount border border-dark border-4 border-solid rounded-circle p-1"></text>
              <input typeGen="2" nombre="1" class="addGeneratorButton btn btn-primary m-3" type="button" value="Plume">
              <text>Coût = </text>
              <text class="generatorCost" typeGen="2" nombre="1"></text>
              <input typeGen="2" nombre="10" class="addGeneratorButton btn btn-primary m-3" type="button" value="X 10">
              <text>Coût = </text>
              <text class="generatorCost" typeGen="2" nombre="10"></text>
            </div>
          </div>
        </div>
        <div class="col">
          <input id="resetTableButton" class="btn btn-secondary m-3" type="button" value="Reset Pixel">
        </div>
        <div class="col">
          <input id="saveButton" class="btn btn-secondary m-3" type="button" value="Save">
        </div>
        <div class="col">
          <input id="hiddenButton" class="btn btn-secondary m-3" type="button" value="Save" hidden="hidden">
        </div>
      </div>
  </div>
</div>
<br>
<br>
<span class="placeholder col-12 bg-dark"></span>
{% endblock %}

{% block footer %}
    {% include 'footer.html.twig' %}
{% endblock %}